For this Node.js lab assignment, our main goal was to demonstrate how to work with modules using the ES6 import/export syntax. To complete this, we created a small project using two JavaScript files. The first file, named utils.mjs, was built to hold a collection of custom utility functions. These functions were designed based on the assignment requirements: we included a function to print a personalized welcome message, a conversion function to change kilometers into miles, a mathematical function to calculate the factorial of a number, and an extra advanced function that generates a random password using a mix of characters.
Once the utils.mjs file was complete, we created a second file called index.mjs, which serves as the main entry point of the application. In this file, we imported all the functions from utils.mjs using ES module syntax (import { ... } from './utils.mjs';) and called each function with example values to see how they work. For example, we used printWelcome() to show a greeting using a name, and convertKmToMiles() to convert a sample distance. We also calculated the factorial of a number and generated a random password of a specific length using our custom functions.
To make sure the code works correctly with ES Modules in Node.js, we used .mjs file extensions instead of the default .js. This is important because Node.js treats .js files as CommonJS by default, and only supports the ES module syntax if you either use .mjs or define "type": "module" in a package.json file. In our case, we used .mjs, which allowed us to skip creating a package.json entirely and keep things simpler.

Finally, to run our program, we opened a terminal, navigated to the project folder, and executed the index.mjs file using the command node index.mjs. This displayed the output of all our functions in the console. The structure of the project followed best practices and demonstrated a clean, modular approach to organizing code in Node.js.
